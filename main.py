import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª
def save_notes_to_file(user_notes):
    with open("notes.json", "w") as file:
        json.dump(user_notes, file, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def read_notes_from_file():
    try:
        with open("notes.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
user_notes = read_notes_from_file()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
def delete_note_keyboard(notes):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for note in notes:
        keyboard.add(types.InlineKeyboardButton(f"üóë{note['date']}", callback_data=f"delete_note_{note['date']}"))
    return keyboard

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"))
    keyboard.add(types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏üìÇ"))
    
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–º–µ—Ç–æ–∫.", reply_markup=keyboard)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ—Ä—Å–ø–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–∞–∂–º–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')

@dp.message_handler(lambda message: message.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def add_note_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:")
    user_id = str(message.from_user.id)
    user_notes[user_id] = user_notes.get(user_id, [])  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message_handler(lambda message: message.text.lower() == "–æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏üìÇ")
async def read_notes(message: types.Message):
    user_id = str(message.from_user.id)
    notes = user_notes.get(user_id)
    if notes:
        notes_text = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
        for note in notes:
            notes_text += f"–î–∞—Ç–∞: {note['date']}\n–ó–∞–º–µ—Ç–∫–∞: {note['note']}\n\n"
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
        keyboard.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—Éüóë", callback_data="delete"))
        await message.answer(notes_text, reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

@dp.callback_query_handler(lambda query: query.data.startswith('delete_note_'))
async def delete_note_callback(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    date_to_delete = callback_query.data.split('_')[-1]
    notes = user_notes.get(user_id)
    notes_text = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
    for note in notes:
        notes_text += f"–î–∞—Ç–∞: {note['date']}\n–ó–∞–º–µ—Ç–∫–∞: {note['note']}\n\n"
    if notes:
        for i, note in enumerate(notes):
            if note['date'] == date_to_delete:
                del user_notes[user_id][i]
                save_notes_to_file(user_notes)
                await callback_query.answer("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞üóë")
                notes = user_notes.get(user_id)
                keyboard = delete_note_keyboard(notes)
                keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
                await callback_query.message.edit_text(notes_text, reply_markup=keyboard)
                return
    await callback_query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@dp.callback_query_handler(lambda query: query.data == 'back')
async def back_callback(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    notes = user_notes.get(user_id)
    if notes:
        notes_text = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
        for note in notes:
            notes_text += f"–î–∞—Ç–∞: {note['date']}\n–ó–∞–º–µ—Ç–∫–∞: {note['note']}\n\n"
        keyboard = delete_note_keyboard(notes)
        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
        await callback_query.message.edit_text(notes_text, reply_markup=keyboard)
    else:
        await callback_query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

@dp.callback_query_handler(lambda query: query.data == 'delete')
async def delete_menu_callback(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    notes = user_notes.get(user_id)
    if notes:
        notes_text = "\n"
        for note in notes:
            notes_text += f"–î–∞—Ç–∞: {note['date']}\n–ó–∞–º–µ—Ç–∫–∞: {note['note']}\n\n"
    keyboard = delete_note_keyboard(notes)
    keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    await callback_query.message.edit_text(f"–ö–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É —É–¥–∞–ª—è—Ç—å?üóë\n{notes_text}", reply_markup=keyboard)

@dp.message_handler()
async def save_note(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in user_notes:
        user_notes[user_id].append({
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "note": message.text
        })
        save_notes_to_file(user_notes)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª
        await message.answer("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É, –≤–≤–µ–¥–∏—Ç–µ /note.")

if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling())
    loop.run_forever()
